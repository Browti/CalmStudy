package com.example.calmstudy.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController

data class SurveyQuestion(
    val question: String,
    val options: List<String>,
    var selectedAnswer: Int = -1
)

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SurveyScreen(navController: NavController) {
    var questions by remember {
        mutableStateOf(
            listOf(
                SurveyQuestion(
                    "–Ø–∫ —Ç–∏ –æ—Ü—ñ–Ω—é—î—à —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—É —Å—å–æ–≥–æ–¥–Ω—ñ?",
                    listOf("üòå –ú–∞–π–∂–µ –±–µ–∑ —Å—Ç—Ä–µ—Å—É", "üòê –ü–æ–º—ñ—Ä–Ω–∏–π —Å—Ç—Ä–µ—Å", "üòü –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—É")
                ),
                SurveyQuestion(
                    "–°–∫—ñ–ª—å–∫–∏ —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–¥–ø–æ—á–∏–≤–∞–≤(-–ª–∞) –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è?",
                    listOf("‚è≥ –ß–∞—Å—Ç–æ —Ä–æ–±–∏–≤(-–ª–∞) –ø–µ—Ä–µ—Ä–≤–∏", "üîÑ –î–µ–∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –≤—ñ–¥–ø–æ—á–∏–≤–∞–≤(-–ª–∞)", "üèÉ‚Äç‚ôÇÔ∏è –í–µ—Å—å –¥–µ–Ω—å –±—É–≤(-–ª–∞) —É —Ä—É—Å—ñ –±–µ–∑ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É")
                ),
                SurveyQuestion(
                    "–Ø–∫ –±–∏ —Ç–∏ –æ–ø–∏—Å–∞–≤(-–ª–∞) —Å–≤–æ—é –º–æ—Ç–∏–≤–∞—Ü—ñ—é —Å—å–æ–≥–æ–¥–Ω—ñ?",
                    listOf("üî• –í–∏—Å–æ–∫–∞ ‚Äî —Ö–æ—Ç—ñ–ª–æ—Å—è –≤—á–∏—Ç–∏—Å—è", "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞ ‚Äî –∑–º—É—à—É–≤–∞–≤(-–ª–∞) —Å–µ–±–µ", "üí§ –í–∑–∞–≥–∞–ª—ñ –Ω–µ –±—É–ª–æ —Å–∏–ª —ñ –±–∞–∂–∞–Ω–Ω—è")
                ),
                SurveyQuestion(
                    "–Ø–∫ –º–∏–Ω—É–≤ —Ç–≤—ñ–π –¥–µ–Ω—å —É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ?",
                    listOf("üó£Ô∏è –ë—É–ª–æ –ø—Ä–∏—î–º–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è", "ü§ê –ú–∞–π–∂–µ –Ω—ñ –∑ –∫–∏–º –Ω–µ –≥–æ–≤–æ—Ä–∏–≤(-–ª–∞)", "üö´ –ë—É–ª–æ –Ω–∞–ø—Ä—É–∂–µ–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è")
                ),
                SurveyQuestion(
                    "–ß–∏ –≤—ñ–¥—á—É–≤–∞–≤(-–ª–∞) —Ç–∏ –≤—Ç–æ–º—É –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è?",
                    listOf("üí™ –ù—ñ, –µ–Ω–µ—Ä–≥—ñ—ó –≤–∏—Å—Ç–∞—á–∞–ª–æ", "üò¥ –¢—Ä–æ—Ö–∏ –≤—Ç–æ–º–ª—é–≤–∞–≤—Å—è(-–ª–∞—Å—è)", "üí§ –ë—É–≤(-–ª–∞) –≤–∏—Å–Ω–∞–∂–µ–Ω–∏–π(-–Ω–∞)")
                ),
                SurveyQuestion(
                    "–©–æ –Ω–∞–π–±—ñ–ª—å—à–µ –≤–ø–ª–∏–Ω—É–ª–æ –Ω–∞ —Ç–≤—ñ–π —Å—Ç–∞–Ω —Å—å–æ–≥–æ–¥–Ω—ñ?",
                    listOf("üè´ –ù–∞–≤—á–∞–ª—å–Ω—ñ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", "ü§Ø –û—Å–æ–±–∏—Å—Ç—ñ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–Ω—è", "ü§© –•–æ—Ä–æ—à—ñ –º–æ–º–µ–Ω—Ç–∏, —è–∫—ñ –ø—ñ–¥–Ω—è–ª–∏ –Ω–∞—Å—Ç—Ä—ñ–π", "üí§ –ù–µ–¥–æ—Å–∏–ø–∞–Ω–Ω—è")
                ),
                SurveyQuestion(
                    "–ß–∏ –∑–∞–π–º–∞–≤—Å—è(-–ª–∞—Å—è) —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —á–∏–º–æ—Å—å –¥–ª—è —Ä–æ–∑—Å–ª–∞–±–ª–µ–Ω–Ω—è?",
                    listOf("üé∂ –°–ª—É—Ö–∞–≤(-–ª–∞) –º—É–∑–∏–∫—É", "üèÉ‚Äç‚ôÇÔ∏è –†–æ–±–∏–≤(-–ª–∞) —Ñ—ñ–∑–∏—á–Ω—ñ –≤–ø—Ä–∞–≤–∏", "üé® –ó–∞–π–º–∞–≤—Å—è(-–ª–∞—Å—è) —Ö–æ–±—ñ", "‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–≤(-–ª–∞)")
                )
            )
        )
    }

    var showResults by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("–¢–≤—ñ–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –¥–µ–Ω—å") },
                navigationIcon = {
                    IconButton(onClick = { navController.navigateUp() }) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "–ù–∞–∑–∞–¥")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer
                )
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            if (!showResults) {
                questions.forEachIndexed { index, question ->
                    QuestionCard(
                        question = question,
                        onAnswerSelected = { answer ->
                            questions = questions.toMutableList().also {
                                it[index] = question.copy(selectedAnswer = answer)
                            }
                        }
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                }

                if (questions.all { it.selectedAnswer != -1 }) {
                    Button(
                        onClick = { showResults = true },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")
                    }
                }
            } else {
                ResultsCard(questions = questions)
                
                Button(
                    onClick = { 
                        questions = questions.map { it.copy(selectedAnswer = -1) }
                        showResults = false
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 16.dp)
                ) {
                    Text("–ü—Ä–æ–π—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–æ–≤—É")
                }
            }
        }
    }
}

@Composable
fun QuestionCard(
    question: SurveyQuestion,
    onAnswerSelected: (Int) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.secondaryContainer
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = question.question,
                style = MaterialTheme.typography.titleMedium,
                modifier = Modifier.padding(bottom = 16.dp)
            )
            
            question.options.forEachIndexed { index, option ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 4.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    RadioButton(
                        selected = question.selectedAnswer == index,
                        onClick = { onAnswerSelected(index) }
                    )
                    Text(
                        text = option,
                        modifier = Modifier.padding(start = 8.dp)
                    )
                }
            }
        }
    }
}

@Composable
fun ResultsCard(questions: List<SurveyQuestion>) {
    val goodAnswers = questions.count { it.selectedAnswer == 0 }
    val mediumAnswers = questions.count { it.selectedAnswer == 1 }
    val badAnswers = questions.count { it.selectedAnswer == 2 }
    
    val recommendation = when {
        goodAnswers >= maxOf(mediumAnswers, badAnswers) -> 
            "‚úÖ –ú–æ–ª–æ–¥–µ—Ü—å! –ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ. –ú–æ–∂–µ—à –≤–∏–¥—ñ–ª–∏—Ç–∏ —Ö–≤–∏–ª–∏–Ω–∫—É –Ω–∞ —É–ª—é–±–ª–µ–Ω—É –º—É–∑–∏–∫—É —á–∏ —Å–ø–æ–∫—ñ–π–Ω–µ —Å–ø–æ–≥–ª—è–¥–∞–Ω–Ω—è –ø—Ä–∏—Ä–æ–¥–∏, —â–æ–± —â–µ –±—ñ–ª—å—à–µ –∑–∞–∫—Ä—ñ–ø–∏—Ç–∏ –≥–∞—Ä–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π."
        mediumAnswers >= maxOf(goodAnswers, badAnswers) -> 
            "‚òï –¢–∏ –¥–æ–±—Ä–µ –≤–ø–æ—Ä–∞–≤—Å—è(-–ª–∞—Å—è), –∞–ª–µ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏. –°–ø—Ä–æ–±—É–π —Å—å–æ–≥–æ–¥–Ω—ñ –≤–≤–µ—á–µ—Ä—ñ —Ä–æ–∑—Å–ª–∞–±–∏—Ç–∏—Å—è: –≥–∞—Ä—è—á–∏–π —á–∞–π, –ø—Ä–∏—î–º–Ω–∞ –º—É–∑–∏–∫–∞ —á–∏ –Ω–∞–≤—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ –¥–æ–ø–æ–º–æ–∂—É—Ç—å."
        else -> 
            "üõë –¢–æ–±—ñ –≤–∞—Ä—Ç–æ –ø–æ–¥–±–∞—Ç–∏ –ø—Ä–æ —Å–µ–±–µ. –ì–ª–∏–±–æ–∫–µ –¥–∏—Ö–∞–Ω–Ω—è, 10-—Ö–≤–∏–ª–∏–Ω–Ω–∞ –º–µ–¥–∏—Ç–∞—Ü—ñ—è –∞–±–æ —Ç–µ–ø–ª–∞ –≤–∞–Ω–Ω–∞ –º–æ–∂—É—Ç—å –¥–æ–ø–æ–º–æ–≥—Ç–∏. –ó–∞–≤—Ç—Ä–∞ —Å–ø—Ä–æ–±—É–π –∑—Ä–æ–±–∏—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –º–∞–ª–µ–Ω—å–∫—É –ø—Ä–∏—î–º–Ω—É —Ä—ñ—á –¥–ª—è —Å–µ–±–µ."
    }

    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.primaryContainer
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üìä –ê–Ω–∞–ª—ñ–∑ –Ω–∞—Å—Ç—Ä–æ—é —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó",
                style = MaterialTheme.typography.titleLarge,
                modifier = Modifier.padding(bottom = 16.dp)
            )
            
            Text(
                text = recommendation,
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.padding(bottom = 16.dp)
            )
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            Text(
                text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:",
                style = MaterialTheme.typography.titleMedium,
                modifier = Modifier.padding(bottom = 8.dp)
            )
            Text("üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: $goodAnswers")
            Text("üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: $mediumAnswers")
            Text("üòü –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: $badAnswers")
        }
    }
} 